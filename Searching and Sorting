1.Two People meet each other
   
   bool check(int x1,int x2,int v1,int v2){
     if(x1<x2 && v1<=v2)
     {
       return false;
     }
     if(x1>x2 && v1>=v2)
     {
        return false;
     }
     if(x1<x2)
     {
        swap(x1,x2);
        swap(v1,v2);
     }
     return ((x1-x2) % (v1-v2) ==0);
   }
   
   2. Find majority element // the number which occurs more than n/2 times
   
       int arr[]={1,3,3,2,1}
       int get_index(int arr[],int n)
       {
           int count=1;
           int maj_index=0;
           for(int i=1;i<n;i++)
           {
              if(arr[maj_index]==arr[i])
              {
                 count++;
              }
              else
              {
                count--;
              }
              if(count==0)
              {
                 maj_index=i;
                 count=1;
              }
           }
           return arr[maj_index];
       }
       void get_count(int arr[],int x)
       {
          int count=0;
          for(int i=0;i<n;i++)
          {
              if(arr[i]==x)
              {
                 count++;
              }
          }
          if(count>n/2)
          {
              cout<<x<<endl;           // O(n),O(1)
          }
          else
          {
            cout<<"no majority element";
          }
       }
       
       
       3.Find the peak element in an array // an element is peak element if it is gretaer than its neighbour elements
       
          int arr[]={1,3,20,4,1,0}
          void findpeakutill(int arr[],int low,int high,int n)
          {
             int mid=low+(high-low)/2;
             if((mid==0 || arr[mid-1]<=arr[mid]  && (mid==n-1 || arr[mid)>=arr[mid+1))
             {
                cout<<mid<<endl;
             }
             else if(mid>0 && arr[mid-1]>arr[mid])
             {
                findpeakutill(arr,low,mid-1,n);          //O(logn) O(1)
             }
             else
             {
                findpeakutill(arr,mid+1,high,n);
             }
          }
          void findpeak(int arr[],int n)
          {
             findpeakutill(arr,0,n-1,n);
          }
          
      5. Find first and last position of an element in an array
      
        int arr[]={1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
        int x=8;
         int  getfirst(int arr[],int n)
         {
           int low=0,high=n-1,res=-1;
           while(low<=high)
           {
           int mid=low+high/2;
           if(arr[mid]<x){
              low=mid+1;
           }
           else if(arr[mid]>x)
           {
             high=mid-1;
           }
           else
           {
             res=mid;
             high=mid-1;
           }
           }
           return res;
         }
         int  getlast(int arr[],int n)
         {
           int low=0,high=n-1,res=-1;
           while(low<=high)
           {
           int mid=low+high/2;
           if(arr[mid]<x){
              low=mid+1;
           }
           else if(arr[mid]>x)
           {
             high=mid-1;
           }
           else
           {                             O(logn) O(1)
             res=mid;
             low=mid+1;
           }
           }
           return res;
         }
         int first=getfirst(arr,n,x);
         int last=getlast(arr,n,x);
       
      6.Segregate 0's and 1's
      
         void segregate(int arr[],int n)
         {
            int low=0;
            int high=n-1;
            while(low<high){
              if(arr[low]==1)
              {
                 swap(arr[low],arr[high]);
                 high--;                          O(n)
              }
              else
              {
                 low++;
              }
            }
         }
         
      7.  sort 0's ,1's and 2's
      
           int arr[] = { 0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1 };
           void sort(int arr[],int n){
             int low=0;
             int mid=0;
             int high=n-1;
             while(mid<high){
                 switch(arr[mid]){
                    case 0:
                        swap(arr[low++],arr[mid++]);
                        break;                                 O(n),O(1)
                    case 1:
                        mid++;
                        break;
                     case 2:
                         swap(arr[mid],arr[high--]);
                         break;
                 }
             }
           }
           
           
        8.Alternative sorting
          
          int arr[] = {1, 12, 4, 6, 7, 10};
           void sorting(int arr[],int n){
             sort(arr,arr+n);
             int i=0;
             int high=n-1;
             while(i<high){
               cout<<arr[high--]<<" ";
               cout<<arr[i++]<<" ";
             }
             if(n%2!=0){
             cout<<arr[i]<<" ";
             }
           }
           
       9.  Counting inversions arr[i]>arr[j] && i<j
       
       10.Trapping rain water problem
       
               int arr[] = { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 };
               void find(int arr[],int n){
                  int left[n];
                  int right[n];
                  left[0]=arr[0];
                  right[n-1]=arr[n-1];
                  for(int i=1;i<n;i++){
                     left[i]=max(arr[i],left[i-1]);
                  }
                  for(int i=n-2;i>=0;i--){
                    right[i]=max(arr[i],right[i+1]);
                  }
                  int water=0;                            O(n),O(n)
                  for(int i=0;i<n;i++){
                  water+=min(left[i],right[i])-arr[i];
                  }
                  cout<<water<<endl;
               }
