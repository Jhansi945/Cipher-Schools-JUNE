2.N queen problem
    
    #include <bits/stdc++.h>
using namespace std;

bool isSafe(vector<vector<bool>> &board, int row, int col, int N)
{
    int r, c;
    for (c = 0; c < col; c++)
    {
        if (board[row][c])
            return false;
    }

    for (r = row, c = col; r >= 0 && c >= 0; r--, c--)
    {
        if (board[r][c])
            return false;
    }

    for (r = row, c = col; c >= 0 && r < N; r++, c--)
        if (board[r][c])
            return false;

    return true;
}

bool generateNQueenBoardHelper(vector<vector<bool>> &board, int col, int N)
{
    if (col >= N)
        return true;

    for (int row = 0; row < N; row++)
    {
        if (isSafe(board, row, col, N))
        {
            board[row][col] = true;
            if (generateNQueenBoardHelper(board, col + 1, N))
                return true;
            // backtracking step
            board[row][col] = false;
        }
    }

    return false;
}

bool generateNQueenBoard(int N)
{
    vector<vector<bool>> board(N, vector<bool>(N, false));
    if (!generateNQueenBoardHelper(board, 0, N))
    {
        return false;
    }
    else
    {
        for (vector<bool> row : board)
        {
            for (int cell : row)
            {
                cout << (cell == true ? 1 : 0) << "\t";
            }
            cout << "\n";
        }
        return true;
    }
}

   4.power subset
   
     char set[]={'a','b','c'};
     void find(char*set,int size){
         int n=pow(2,size);
         int counter,j;
         for(counter=0;counter<n;counter++){
            for(j=0;j<size;j++){
               if(counter & (1<<j)){
                  cout<<set[j];
               }
               cout<<endl;         //O(n2^n)
            }
         }
     }
     
   5.largest number after k swaps
      void find(string str,int k,string &max,int ctr){
         if(k==0){
           return;
         }
         char maxm=str[ctr];
         for(int j=ctr+1;j<n;j++){
           if(maxm<str[j]){
              maxm=str[j];
           }
         }
         if(maxm!=str[ctr]){
           --k;
         }
         for(int j=ctr;j<n;j++){
            if(str[j]==maxm){
              swap(str[j],str[ctr]);
              if(str.compare(max)>0){
                  max=str;
              }
              find(str,k,max,ctr+1);
              swap(str[j],str[ctr]);
            }
         }
      }
     string str="129814999";
     string max=str;
     int k=4;
     find(str,k,max,0);
     cout<<max<<endl;
     
  6.knights tour problem
  
    int BoardSize = 8;
int possibleMoves = 8;
int xMoves[8] = {2, 1, -1, -2, -2, -1, 1, 2};
int yMoves[8] = {1, 2, 2, 1, -1, -2, -2, -1};

bool isSafe(vector<vector<int>> &board, int r, int c)
{
    return (r >= 0 && r < BoardSize && c >= 0 && c < BoardSize && board[r][c] == 0);
}

bool knightTourHelper(vector<vector<int>> &board, int r, int c, int count)
{
    if (count == BoardSize * BoardSize)
    {
        return true;
    }

    for (int i = 0; i <= possibleMoves; i++)
    {
        int nextXMove = r + xMoves[i];
        int nextYMove = c + yMoves[i];
        if (isSafe(board, nextXMove, nextYMove))
        {
            board[nextXMove][nextYMove] = count;
            if (knightTourHelper(board, nextXMove, nextYMove, count + 1))
            {
                return true;
            }
            else
            {
                board[nextXMove][nextYMove] = 0;
            }
        }
    }

    return false;
}

bool knightTour()
{
    vector<vector<int>> board(BoardSize, vector<int>(BoardSize, 0));
    board[0][0] = 1;
    if (knightTourHelper(board, 0, 0, 2)) {
        cout << "Found it\n";
        for (vector<int> row : board) {
            for (int cell: row) {
                cout << cell << "\t";
            }
            cout << "\n";
        }
        return true;
    } else {
        cout << "No Path Found\n";
        return false;
    }

}

 7.unique paths
 
    vector<vector<int>> A = { { 0, 0, 0 },
                             { 0, 1, 0 },
                             { 0, 0, 0 } };
                              
                              
     int find(vector<vector<int>>A){
        int r=A.size();
        int c=A[0].size();
         vector<vector<int>>paths(r,vector<int>(c,0));
         if(A[0][0]!=1){
            paths[0][0]=1;
         }
         for(int i=1;i<r;i++){
           if(A[i][0]==0){
              paths[i][0]=paths[i-1][0];
           }
         }
         for(int i=1;i<c;i++){
            if(A[0][i]==0){
                paths[0][i]=paths[0][i-1];
            }
         }
         for(int i=1;i<r;i++){
           for(int j=1;j<c;j++){
               if(A[i][j]==1){
                  paths[i][j]=paths[i-1][j]+paths[i][j-1];
               }
           }
         }
         return paths[r-1];
     }
    
    
    8. find the column name of excel number
    
      int n=51;
      
      void find(int n){
        char str[50];
        int i=0;
        while(n){
           int rem=n%26;
           
           if(rem==0){
              str[i++]='z';
              n=n/26-1;
           }
           else
           {
              str[i++]=(rem-1)+'A';
              n=n/26;
           }
        }
        str[i]='\0';
        reverse(str,str+strlen(str));
        cout<<str<<endl;
      }
      
      
      9.excel column number
      
        string s="cda"
        void find(string s){
           int n=s.length();
           int result=0;
           for(int i=0;i<n;i++){
             result=result*26+s[i]-'A'+1;
           }
           cout<<result<<endl;
        }
        
      10.trailing zeroes
      
        int n;
        void find(int n){
            int count=0;
            for(int i=5;n/i>=1;i*=5){
              count+=n/i;
            }
            cout<<count<<endl;
        }
