2.N queen problem
    
    #include <bits/stdc++.h>
using namespace std;

bool isSafe(vector<vector<bool>> &board, int row, int col, int N)
{
    int r, c;
    for (c = 0; c < col; c++)
    {
        if (board[row][c])
            return false;
    }

    for (r = row, c = col; r >= 0 && c >= 0; r--, c--)
    {
        if (board[r][c])
            return false;
    }

    for (r = row, c = col; c >= 0 && r < N; r++, c--)
        if (board[r][c])
            return false;

    return true;
}

bool generateNQueenBoardHelper(vector<vector<bool>> &board, int col, int N)
{
    if (col >= N)
        return true;

    for (int row = 0; row < N; row++)
    {
        if (isSafe(board, row, col, N))
        {
            board[row][col] = true;
            if (generateNQueenBoardHelper(board, col + 1, N))
                return true;
            // backtracking step
            board[row][col] = false;
        }
    }

    return false;
}

bool generateNQueenBoard(int N)
{
    vector<vector<bool>> board(N, vector<bool>(N, false));
    if (!generateNQueenBoardHelper(board, 0, N))
    {
        return false;
    }
    else
    {
        for (vector<bool> row : board)
        {
            for (int cell : row)
            {
                cout << (cell == true ? 1 : 0) << "\t";
            }
            cout << "\n";
        }
        return true;
    }
}

   4.power subset
   
     char set[]={'a','b','c'};
     void find(char*set,int size){
         int n=pow(2,size);
         int counter,j;
         for(counter=0;counter<n;counter++){
            for(j=0;j<size;j++){
               if(counter & (1<<j)){
                  cout<<set[j];
               }
               cout<<endl;         //O(n2^n)
            }
         }
     }
     
   5.largest number after k swaps
      void find(string str,int k,string &max,int ctr){
         if(k==0){
           return;
         }
         char maxm=str[ctr];
         for(int j=ctr+1;j<n;j++){
           if(maxm<str[j]){
              maxm=str[j];
           }
         }
         if(maxm!=str[ctr]){
           --k;
         }
         for(int j=ctr;j<n;j++){
            if(str[j]==maxm){
              swap(str[j],str[ctr]);
              if(str.compare(max)>0){
                  max=str;
              }
              find(str,k,max,ctr+1);
              swap(str[j],str[ctr]);
            }
         }
      }
     string str="129814999";
     string max=str;
     int k=4;
     find(str,k,max,0);
     cout<<max<<endl;
     
    
