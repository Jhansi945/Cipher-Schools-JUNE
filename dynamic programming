1.coin exchange problem

  //we have infinite supply of numbers 
  
  n=4 s={1,2,3}  {1,1,1,1},{1,1,2},{2,2},{1,3}
  
  recursive solution
  
  int count(int s[],int m,int n){  // m size
    if(n==0){
      return 1;
    }
    if(n<0){
       return 0;
    }
    if(m<=0 && n>=1){
      return 0;
    }
           //excluding the element  // including the element 
    return count(s,m-1,n)+count(s,m,n-s[m-1]);
  }
  
  //dp problem
  
  int fun(int s[],int m,int n){
    int table[n+1];
    memset(table,0,sizeof(table));
    table[0]=1;
    for(int i=0;i<m;i++){
      for(int j=s[i];j<=n;j++){
        table[j]+=table[j-s[i]];
      }
    }
    return table[n];
  }
  
  2. longest common subsequence
  
    int fun(string s1,string s2){
      int n1=s1.length();
      int n2=s2.length();
      int table[n1+1][n2+1];
      for(int i=0;i<=n2;i++){
         table[0][i]=0;
      }
      for(int j=0;j<=n1;j++){
        table[j][0]=0;
      }
      for(int i=1;i<=n1;i++){
         for(int j=1;j<=n2;j++){
           if(s1[i]==s2[j]){
              table[i][j]=table[i-1][j-1]+1;
           }
           else{
             table[i][j]=max(table[i-1][j],table[i][j-1]);
           }
         }
      }
      return table[n1][n2];
    }
    
    
  3. 0/1 knapsack problem
  
    
